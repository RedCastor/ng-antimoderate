{"version":3,"sources":["ng-antimoderate.js"],"names":["angular","module","directive","restrict","replace","scope","ngAntimoderate","scale","loadingClass","loadedClass","transclude","link","$scope","el","attrs","image_element","param","temp_loaded_src","loading_class","loaded_class","antimoderate","mul_table","shg_table","processImage","img","idata","canvas","document","createElement","idata_img","Image","onload","w","width","h","height","style","context","getContext","clearRect","drawImage","sc","radius","Math","sqrt","naturalWidth","naturalHeight","isNaN","imageData","getImageData","pixels","data","x","y","i","p","yp","yi","yw","r_sum","g_sum","b_sum","r_out_sum","g_out_sum","b_out_sum","r_in_sum","g_in_sum","b_in_sum","pr","pg","pb","rbs","div","w4","wMinus1","hMinus1","radiusPlus1","sumFactor","stackStart","r","g","b","a","next","stack","stackEnd","stackIn","stackOut","mul_sum","shg_sum","orig_src","getAttribute","removeClass","addClass","orig_img","src","push","putImageData","toDataURL","shg_cur_n","length","populate_shg","n","isDefined","$watch","value","indexOf","window"],"mappings":"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","file":"ng-antimoderate.js","sourcesContent":["(function(angular){\n    'use strict';\n\n    angular.module('ngAntimoderate', []).directive('ngAntimoderate', [ function () {\n        return {\n            restrict: \"A\",\n            replace: false,\n            scope: {\n                ngAntimoderate: '@',\n                scale: '@',\n                loadingClass: '@',\n                loadedClass: '@'\n            },\n            transclude: false,\n            link: function ($scope, el, attrs) {\n\n                var image_element = el[0];\n                var param = {};\n                var temp_loaded_src = [];\n\n\n                param.scale = $scope.scale || '2';\n                param.loading_class = $scope.loadingClass || 'loading';\n                param.loaded_class = $scope.loadedClass || 'loaded';\n\n\n                var antimoderate = {\n                    mul_table: [\n                        256,256,200,256,72,200,79,256,149,72,15,200,132,79,36,256,198,149,108,72,42,15,240,200,164,132,\n                        104,79,56,36,17,256,226,198,172,149,127,108,89,72,56,42,28,15,3,240,219,200,181,164,148,132,118,104,91,\n                        79,67,56,46,36,26,17,9,256,241,226,212,198,185,172,161,149,138,127,117,108,98,89,81,72,64,56,49,42,35,\n                        28,22,15,9,3,251,240,229,219,209,200,190,181,172,164,156,148,140,132,125,118,111,104,98,91,85,79,73,67,\n                        62,56,51,46,41,36,31,26,22,17,13,9,5,256,249,241,233,226,219,212,205,198,191,185,179,172,166,161,155,\n                        149,143,138,133,127,122,117,112,108,103,98,94,89,85,81,76,72,68,64,60,56,53,49,45,42,38,35,31,28,25,22,\n                        18,15,12,9,6,3,1,251,245,240,235,229,224,219,214,209,204,200,195,190,186,181,177,172,168,164,160,156,152,\n                        148,144,140,136,132,129,125,121,118,114,111,107,104,101,98,94,91,88,85,82,79,76,73,70,67,64,62,59,56,54,\n                        51,48,46,43,41,38,36,33,31,29,26,24,22,19,17,15,13,11,9,7,5,3\n                    ],\n\n                    shg_table: [9, 11, 12, 13, 13, 14, 14],\n\n                    processImage: function(img, idata, scale)\n                    {\n                        var canvas = document.createElement('canvas');\n\n                        var idata_img = new Image();\n                        idata_img.onload = function() {\n                            var w = img.width;\n                            var h = img.height;\n\n                            canvas.style.width  = w + 'px';\n                            canvas.style.height = h + 'px';\n                            canvas.width = w;\n                            canvas.height = h;\n\n                            var context = canvas.getContext('2d');\n                            context.clearRect(0, 0, w, h);\n                            context.drawImage(idata_img, 0, 0, w, h);\n\n                            var sc = scale || param.scale;\n                            var radius = (Math.sqrt(w * h) / Math.sqrt(idata_img.naturalWidth * idata_img.naturalHeight)) * sc;\n\n                            if (isNaN(radius) || radius < 1) {\n                                return;\n                            }\n\n                            radius |= 0;\n\n                            var imageData = canvas.getContext('2d').getImageData(0, 0, w, h);\n\n                            var pixels = imageData.data;\n\n                            var x, y, i, p, yp, yi, yw, r_sum, g_sum, b_sum,\n                                r_out_sum, g_out_sum, b_out_sum,\n                                r_in_sum, g_in_sum, b_in_sum,\n                                pr, pg, pb, rbs;\n\n                            var div = radius + radius + 1;\n                            var w4 = w << 2;\n                            var wMinus1  = w - 1;\n                            var hMinus1 = h - 1;\n                            var radiusPlus1  = radius + 1;\n                            var sumFactor = radiusPlus1 * (radiusPlus1 + 1) / 2;\n\n                            var stackStart = {r:0,g:0,b:0,a:0,next:null};\n                            var stack = stackStart;\n                            var stackEnd;\n\n                            for(i = 1; i < div; i++) {\n                                stack = stack.next = {r:0,g:0,b:0,a:0,next:null};\n\n                                if (i === radiusPlus1) {\n                                    stackEnd = stack;\n                                }\n                            }\n                            stack.next = stackStart;\n                            var stackIn = null;\n                            var stackOut = null;\n\n                            yw = yi = 0;\n\n                            var mul_sum = antimoderate.mul_table[radius];\n                            var shg_sum = antimoderate.shg_table[radius];\n\n                            for(y = 0; y < h; y++) {\n                                r_in_sum = g_in_sum = b_in_sum = r_sum = g_sum = b_sum = 0;\n\n                                r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n                                g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n                                b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n                                r_sum += sumFactor * pr;\n                                g_sum += sumFactor * pg;\n                                b_sum += sumFactor * pb;\n\n                                stack = stackStart;\n\n                                for(i = 0; i < radiusPlus1; i++) {\n                                    stack.r = pr;\n                                    stack.g = pg;\n                                    stack.b = pb;\n                                    stack = stack.next;\n                                }\n\n                                for(i = 1; i < radiusPlus1; i++) {\n                                    p = yi + ((wMinus1 < i ? wMinus1 : i) << 2);\n                                    r_sum += (stack.r = (pr = pixels[p])) * (rbs = radiusPlus1 - i);\n                                    g_sum += (stack.g = (pg = pixels[p+1])) * rbs;\n                                    b_sum += (stack.b = (pb = pixels[p+2])) * rbs;\n\n                                    r_in_sum += pr;\n                                    g_in_sum += pg;\n                                    b_in_sum += pb;\n\n                                    stack = stack.next;\n                                }\n\n\n                                stackIn = stackStart;\n                                stackOut = stackEnd;\n                                for(x = 0; x < w; x++) {\n                                    pixels[yi]   = (r_sum * mul_sum) >> shg_sum;\n                                    pixels[yi+1] = (g_sum * mul_sum) >> shg_sum;\n                                    pixels[yi+2] = (b_sum * mul_sum) >> shg_sum;\n\n                                    r_sum -= r_out_sum;\n                                    g_sum -= g_out_sum;\n                                    b_sum -= b_out_sum;\n\n                                    r_out_sum -= stackIn.r;\n                                    g_out_sum -= stackIn.g;\n                                    b_out_sum -= stackIn.b;\n\n                                    p =  (yw + ((p = x + radius + 1) < wMinus1 ? p : wMinus1)) << 2;\n\n                                    r_in_sum += (stackIn.r = pixels[p]);\n                                    g_in_sum += (stackIn.g = pixels[p+1]);\n                                    b_in_sum += (stackIn.b = pixels[p+2]);\n\n                                    r_sum += r_in_sum;\n                                    g_sum += g_in_sum;\n                                    b_sum += b_in_sum;\n\n                                    stackIn = stackIn.next;\n\n                                    r_out_sum += (pr = stackOut.r);\n                                    g_out_sum += (pg = stackOut.g);\n                                    b_out_sum += (pb = stackOut.b);\n\n                                    r_in_sum -= pr;\n                                    g_in_sum -= pg;\n                                    b_in_sum -= pb;\n\n                                    stackOut = stackOut.next;\n\n                                    yi += 4;\n                                }\n                                yw += w;\n                            }\n\n\n                            for(x = 0; x < w; x++) {\n                                g_in_sum = b_in_sum = r_in_sum = g_sum = b_sum = r_sum = 0;\n\n                                yi = x << 2;\n                                r_out_sum = radiusPlus1 * (pr = pixels[yi]);\n                                g_out_sum = radiusPlus1 * (pg = pixels[yi+1]);\n                                b_out_sum = radiusPlus1 * (pb = pixels[yi+2]);\n\n                                r_sum += sumFactor * pr;\n                                g_sum += sumFactor * pg;\n                                b_sum += sumFactor * pb;\n\n                                stack = stackStart;\n\n                                for(i = 0; i < radiusPlus1; i++) {\n                                    stack.r = pr;\n                                    stack.g = pg;\n                                    stack.b = pb;\n                                    stack = stack.next;\n                                }\n\n                                yp = w;\n\n                                for(i = 1; i <= radius; i++) {\n                                    yi = (yp + x) << 2;\n\n                                    r_sum += (stack.r = (pr = pixels[yi])) * (rbs = radiusPlus1 - i);\n                                    g_sum += (stack.g = (pg = pixels[yi+1])) * rbs;\n                                    b_sum += (stack.b = (pb = pixels[yi+2])) * rbs;\n\n                                    r_in_sum += pr;\n                                    g_in_sum += pg;\n                                    b_in_sum += pb;\n\n                                    stack = stack.next;\n\n                                    if(i < hMinus1) {\n                                        yp += w;\n                                    }\n                                }\n\n                                yi = x;\n                                stackIn = stackStart;\n                                stackOut = stackEnd;\n                                for(y = 0; y < h; y++) {\n                                    p = yi << 2;\n                                    pixels[p]   = (r_sum * mul_sum) >> shg_sum;\n                                    pixels[p+1] = (g_sum * mul_sum) >> shg_sum;\n                                    pixels[p+2] = (b_sum * mul_sum) >> shg_sum;\n\n                                    r_sum -= r_out_sum;\n                                    g_sum -= g_out_sum;\n                                    b_sum -= b_out_sum;\n\n                                    r_out_sum -= stackIn.r;\n                                    g_out_sum -= stackIn.g;\n                                    b_out_sum -= stackIn.b;\n\n                                    p = (x + (((p = y + radiusPlus1) < hMinus1 ? p : hMinus1) * w)) << 2;\n\n                                    r_sum += (r_in_sum += (stackIn.r = pixels[p]));\n                                    g_sum += (g_in_sum += (stackIn.g = pixels[p+1]));\n                                    b_sum += (b_in_sum += (stackIn.b = pixels[p+2]));\n\n                                    stackIn = stackIn.next;\n\n                                    r_out_sum += (pr = stackOut.r);\n                                    g_out_sum += (pg = stackOut.g);\n                                    b_out_sum += (pb = stackOut.b);\n\n                                    r_in_sum -= pr;\n                                    g_in_sum -= pg;\n                                    b_in_sum -= pb;\n\n                                    stackOut = stackOut.next;\n\n                                    yi += w;\n                                }\n                            }\n\n                            var orig_src = img.getAttribute('src');\n\n                            if(orig_src !== null && orig_src !== '') {\n\n                                el.removeClass(param.loaded_class);\n                                el.addClass(param.loading_class);\n\n                                var orig_img = new Image();\n                                orig_img.onload = function() {\n                                    img.src = orig_src;\n\n                                    el.addClass(param.loaded_class);\n                                    el.removeClass(param.loading_class);\n\n                                    temp_loaded_src.push(image_element.src);\n                                };\n                                orig_img.src = orig_src;\n                            }\n\n                            canvas.getContext('2d').putImageData(imageData, 0, 0);\n                            img.src = canvas.toDataURL();\n                        };\n\n                        idata_img.src = idata;\n                    }\n                };\n\n\n                var shg_cur_n=15;\n\n                var i=0;\n                for(; i < antimoderate.mul_table.length;) {\n                    antimoderate.mul_table[i++] += 256;\n                }\n\n                function populate_shg(n){\n                    for(i = 0; i < n; ++i) {\n                        antimoderate.shg_table.push(shg_cur_n);\n                    }\n\n                    ++shg_cur_n;\n                }\n\n                populate_shg(4);\n                populate_shg(4);\n                populate_shg(7);\n                populate_shg(9);\n                populate_shg(14);\n                populate_shg(18);\n                populate_shg(27);\n                populate_shg(37);\n                populate_shg(54);\n                populate_shg(74);\n\n\n                if (angular.isDefined(image_element.src)) {\n\n                    el.addClass('antimoderate');\n\n                    $scope.$watch('ngAntimoderate', function(value){\n\n                        if (temp_loaded_src.indexOf(image_element.src) === -1) {\n                            antimoderate.processImage(image_element, value, param.scale);\n                        }\n                    });\n\n                }\n\n            }\n        };\n    }]);\n\n})(window.angular);\n"],"sourceRoot":"dist"}